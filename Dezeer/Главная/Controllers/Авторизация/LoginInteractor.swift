//
//  LoginInteractor.swift
//  Dezeer
//
//  Created by Levin Ivan on 11.07.2020.
//  Copyright (c) 2020 Levin Ivan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic {
    func fetchData(request: Login.Fetching.Request)
}

protocol LoginDataStore: class {
//    var name: String { get set }
}

class LoginInteractor: LoginDataStore {
    var presenter: LoginPresentationLogic?
    private lazy var worker = LoginWorker()
//    var name: String = ""
}

// MARK: - LoginBusinessLogic
extension LoginInteractor: LoginBusinessLogic {

    func fetchData(request: Login.Fetching.Request) {
        worker.fetchData(completion: { [weak self] result in
            switch result {
            case .success(let data):
                print(data)
                let response = Login.Fetching.Response()
                self?.presenter?.presentFetchingResult(response: response)
            case .failure(let error):
                self?.showTryAgainError(error)
            }
        })
    }
    
    // MARK: - Private
    
    private func showError(_ error: AppError) {
        presenter?.presentError(error)
    }
    
    private func showTryAgainError(_ error: AppError) {
        presenter?.presentTryAgain(error)
    }
}
